{
  "Repository": {
    "scope": "dart",
    "prefix": "repo",
    "body": [
      "import 'package:foo/src/core/failures.dart';",
      "",
      "abstract class ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/g} {",
      "  Future<Either<Failure, ${1:dynamic}>> ${2:function}();",
      "}",
      ""
    ],
    "description": "Repository abstract class"
  },
  "Repository Impl": {
    "scope": "dart",
    "prefix": "repoImpl",
    "body": [
      "import 'package:foo/src/core/failures.dart';",
      "import '../datasource/${TM_FILENAME_BASE/(^((?!_impl).)*)(.*)/$1/g}.datasource.dart';",
      "import '../../domain/repository/${TM_FILENAME_BASE/(^((?!_impl).)*)(.*)/$1/g}.repository.dart';",
      "",
      "class ${1:${TM_FILENAME_BASE/(^((?!_impl).)*)(.*)/${1:/pascalcase}/g}}RepositoryImpl implements $1Repository {",
      "  final $1DataSource _dataSource;",
      "",
      "  const $1RepositoryImpl(this._dataSource);",
      "}",
      ""
    ],
    "description": "RepositoryImpl class"
  },
  "RepositoryTest": {
    "scope": "dart",
    "prefix": "repoTest",
    "body": [
      "import 'package:flutter_test/flutter_test.dart';",
      "import 'package:mocktail/mocktail.dart';",
      "import 'package:foo/src/core/failures.dart';",
      "import 'package:foo/src/modules/${9:${TM_FILENAME_BASE/(^((?!.repository_test).)*)(.*)/${1:/snakecase}/g}}/data/datasource/$9.datasource.dart';",
      "import 'package:foo/src/modules/$9/data/repository/$9_impl.repository.dart';",
      "import 'package:foo/src/modules/$9/domain/repository/$9.repository.dart';",
      "",
      "class ${7:${TM_FILENAME_BASE/(^((?!repository_test).)*)(.*)/${1:/pascalcase}/g}}DataSourceMock extends Mock implements $7DataSource {}",
      "",
      "main() {",
      "  $7DataSourceMock dataSource;",
      "  ${6:${TM_FILENAME_BASE/(^((?!_test).)*)(.*)/${1:/pascalcase}/g}} repository;",
      "",
      "  setUp(() {",
      "    dataSource = $7DataSourceMock();",
      "    repository =  ${6:${TM_FILENAME_BASE/(^((?!_test).)*)(.*)/${1:/pascalcase}/g}}Impl(dataSource);",
      "  });",
      "",
      "  group('$1', () {",
      "    test('Should $1 successfully', () async {",
      "      when(dataSource.$1($2))",
      "          .thenAnswer((_) async => $3());",
      "",
      "      final res = await repository.$1($2);",
      "",
      "      expect(res, Right($4)));",
      "    });",
      "",
      "    group('Should return failure when datasource', () {",
      "      test('occurs an exception', () async {",
      "        when(dataSource.$1($2)).thenThrow(Exception());",
      "",
      "        final res = await repository.$1($2);",
      "",
      "        expect(res, equals(Left(kServerFailure)));",
      "      });",
      "      test('returns a null value', () async {",
      "        when(dataSource.$1($2))",
      "            .thenAnswer((_) async => null);",
      "",
      "        final res = await repository.$1($2);",
      "",
      "        expect(res, equals(Left(kServerFailure)));",
      "      });",
      "      test('returns a unsuccessfull response', () async {",
      "        when(dataSource.$1($2))",
      "            .thenAnswer((_) async => $3());",
      "",
      "        final res = await repository.$1($2);",
      "",
      "        expect(res, equals(Left(kServerFailure)));",
      "      });",
      "    });",
      "  });",
      "}",
      ""
    ],
    "description": "Repository Test class"
  }
}
