{
  "PageTest": {
    "scope": "dart",
    "prefix": "pageTest",
    "body": [
      "import 'package:bloc_test/bloc_test.dart';",
      "import 'package:flutter_test/flutter_test.dart';",
      "import 'package:get_it/get_it.dart';",
      "import 'package:mocktail/mocktail.dart';",
      "import 'package:metalon/metalon.dart';",
      "import 'package:foo/src/modules/pages.dart';",
      "import 'package:foo/src/presentation/navigation_args/args.dart';",
      "",
      "import '../../../../mocks/navigation.mocks.dart';",
      "import '../../../../utils/test_widgets.dart';",
      "",
      "class ${8:${TM_FILENAME_BASE/(^((?!.page_test).)*)(.*)/${1:/pascalcase}/g}}ControllerMock extends Mock",
      "    implements $8Controller {}",
      "",
      "Future<void> main() async {",
      "  $8Controller controllerMock;",
      "  NavigatorObserverMock navigatorObserverMock;",
      "  NavigatorStateMock navigatorStateMock;",
      "  const defaultArg = $8Arg();",
      "",
      "  setUpAll(() {",
      "    controllerMock = $8ControllerMock();",
      "    navigatorStateMock = NavigatorStateMock();",
      "    navigatorObserverMock = NavigatorObserverMock();",
      "    GetIt.instance.registerFactory<$8Controller>(() => controllerMock);",
      "  });",
      "",
      "  setUp(() {",
      "    when(controllerMock.isLoading).thenReturn(false);",
      "    when(controllerMock.hasFailure).thenReturn(false);",
      "  });",
      "",
      "  tearDown(() {",
      "    reset(controllerMock);",
      "    reset(navigatorObserverMock);",
      "    navigatorObserverMock.reset();",
      "    navigatorStateMock.reset();",
      "  });",
      "",
      "  Future<$8PageState> buildPage(",
      "    WidgetTester tester, {",
      "    bool asSmallDevice,",
      "    bool withNavigatorStateMock = true,",
      "    $8Arg arg = defaultArg,",
      "  }) async {",
      "    final theme = getMetalonAppTheme('pj');",
      "    final page = $8Page(arg);",
      "    await tester.pumpPage(",
      "      page,",
      "      asSmallDevice: asSmallDevice,",
      "      navigatorObserver: navigatorObserverMock,",
      "      navigatorState: withNavigatorStateMock ? navigatorStateMock : null,",
      "      theme: theme,",
      "    );",
      "    return tester.state(find.byType($8Page));",
      "  }",
      "",
      "  group('$8Page', () {",
      "    group('when arg is provided', () {",
      "      group('with null argument', () {",
      "        testWidgets('should not build the page and throws an exception',",
      "            (tester) async {",
      "          expect(() => buildPage(tester, arg: null),",
      "              throwsA(isA<NoSuchMethodError>()));",
      "        });",
      "      });",
      "      group('with default argument', () {",
      "        testWidgets('should have title of page', (tester) async {",
      "          final page = await buildPage(tester);",
      "          expect(page.mainPageHeading,",
      "              equals('Alterar sua senha de acesso ao app'));",
      "        });",
      "      });",
      "    });",
      "    test('Verify something occuring correctly', () {});",
      "  });",
      "}",
      ""
    ],
    "description": "Page SingleButton class"
  }
}
